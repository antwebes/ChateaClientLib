
/******************************************************************************/
/***********************       Friends METHODS    *****************************/
/******************************************************************************/
		
	// 	GET /api/me/friends
	/**
	 * returns the friends of the loged in user
	 */ 
	public function showMeFriends() 
	{
		$this->httClient->addGet(IApi::URI_ME_FRIENDS_SHOW);
		return $this->httpClientSend();

	}
	//POST /api/me/friends
	/**
	 * sends a friendship request to a given user
	 *
	 * @param number $user_id
	 */
	public function addMeFirend($user_id) {
		if (!is_numeric($user_id) || 0 >= $user_id) {
			throw new ApiException(
					"ApiException::addMeFirend id field should be positive integer");
		}
		$this->httClient
				->addPost(IApi::URI_ME_FRIEND_ADD, array('user_id' => $user_id));
		return $this->httpClientSend();
	}
	// 	GET /api/me/friends/pending
	/**
	 * returns the friendships request the loged in user sended that are pending for acceptance
	 */
	public function showFriendshipsPending() {
		$this->httClient->addGet(IApi::URI_ME_FRIENDSHIPS_PENDING_SHOW);
		return $this->httpClientSend();
	}
	// 	GET /api/me/friends/requests
	/**
	 * returns the friendship requests sended the loged in user pending to be accepted
	 *
	 */ 
	public function showFriendshipsRequest() 
	{

		$this->httClient->addGet(IApi::URI_ME_FRIENDSHIPS_REQUEST_SHOW);
		return $this->httpClientSend();

	}
	// 	PUT /api/me/friends/requests/{id}
	/**
	 * accepts a friendship request
	 * 
	 * @param number $id
	 */
	public function acceptsFriendshipRequest($id) 
	{
		if (!is_numeric($id) || 0 >= $id) {
			throw new ApiException(
					"ApiException::addMeFirend id field should be positive integer");
		}
		$this->httClient->addPut(IApi::URI_ME_FRIENDSHIPS_ACCEPTS . $id);
		return $this->httpClientSend();

	}
	// 	DELETE /api/me/friends/{id}
	/**
	 * Deletes a friendship
	 *
	 * @param number $id
	 */ 
	public function declineFriendshipRequest($id) 
	{

		if (!is_numeric($id) || 0 >= $id) {
			throw new ApiException(
					"ApiException::declineFriendshipRequest id field should be positive integer");
		}
		$this->httClient->addPut(IApi::URI_ME_FRIENDSHIPS_DECLINE . $id);
		return $this->httpClientSend();
	}
	// 	DELETE /api/me/friends/{id}
	/**
	 * Deletes a friendship
	 *
	 * @param number $id
	 */ 
	public function delFriendship($id = 0) 
	{

		if (!is_numeric($id) || 0 >= $id) {
			throw new ApiException(
					"ApiException::delFriendship id field should be positive integer");
		}
		$this->httClient->addDelete(IApi::URI_ME_FRIENDSHIPS_DEL . $id);
		return $this->httpClientSend();
	}
	
	public function showFriends($id) {
		// TODO: Auto-generated method stub
	
	}	
/******************************************************************************/
/***********************      PHOTO METHODS  	  *****************************/
/******************************************************************************/	
	// 	POST /api/photo
	/**
	 * create a photo
	 * 
	 * @param string $title
	 * @param string $image the path from image
	 */
	public function addPhoto($title, $image) 
	{

		if (!is_string($title) || 0 >= strlen($title)) {
			throw new ApiException(
					"ApiException::addPhoto title field needs to be a non-empty string");
		}
		if (!file_exists($image)) {
			throw new ApiException(
					sprintf("ApiException::addPhoto image: '%s'  not exists",
							$image));
		}
		$this->httClient
				->addPost(self::URI_ME_PHOTO_ADD, array('title' => $title),
						$image, 'image');

		return $this->httpClientSend();

	}
	//GET /api/me/photo/{id}
	/**
	 * show a photo
	 * @param number $id
	 */
	public function showPhoto($id) 
	{
		if (!is_numeric($id) || 0 >= $id) {
			throw new ApiException(
					"ApiException::showPhoto id field should be positive integer");
		}
		$this->httClient->addGet(IApi::URI_ME_PHOTO_SHOW . $id);
		return $this->httpClientSend();
	}
	// 	DELETE /api/photo/{id} 
	/**
	 * Delete a photo
	 * 
	 * @param number $id
	 */
	public function delPhoto($id) {
		if (!is_numeric($id) || 0 >= $id) {
			throw new ApiException(
					"ApiException::delPhoto id field should be positive integer");
		}
		$this->httClient->addDelete(IApi::URI_ME_PHOTO_DEL . $id);

		return $this->httpClientSend();
	}
	public function showPhotoVotes($photo_id) 
	{
		throw \Exception("This method is not implement yet");
	
	}
	public function showAllFotos($user_id = null) {
		throw \Exception("This method is not implement yet");
	
	}	
/******************************************************************************/
/***********************    Threads METHODS  	  *****************************/
/******************************************************************************/
		
	//POST /api/me/threads
	/**
	 * Creates a thread
	 *
	 * @param string $recipient
	 * @param string $subject
	 * @param string $body
	 */
	public function addThread($recipient, $subject, $body) 
	{

		if (!is_string($recipient) || 0 >= strlen($recipient)) {
			throw new ApiException(
					"ApiException::addThread recipient field needs to be a non-empty string");
		}
		if (!is_string($subject) || 0 >= strlen($subject)) {
			throw new ApiException(
					"ApiException::addThread subject field needs to be a non-empty string");
		}
		if (!is_string($body) || 0 >= strlen($body)) {
			throw new ApiException(
					"ApiException::addThread body field needs to be a non-empty string");
		}

		$data = array(
				'message' => array('recipient' => $recipient,
						'subject' => $subject, 'body' => $body));
		$this->httClient->addPost(IAPI::URI_ME_THREAD_ADD, $data);

		return $this->httpClientSend();
	}
	//GET /api/me/threads/inbox
	/**
	 * Lists threads with messages sended to the logged in user
	 */
	public function showThreadsInbox() 
	{
		$this->httClient->addGet(IAPI::URI_ME_THREAD_INBOX_SHOW);

		return $this->httpClientSend();
	}
	//GET /api/me/threads/sent
	/**
	 * Lists threads with messages sended by the logged in user
	 */
	public function showThreadsSent() 
	{
		$this->httClient->addGet(IAPI::URI_ME_THREAD_SENT_SHOW);

		return $this->httpClientSend();
	}
	//GET /api/me/threads/{id}
	/**
	 * Lists the messages of a given thread
	 *
	 * @param number $thread_id
	 */
	public function showThread($thread_id) 
	{
		if (!is_numeric($thread_id) || 0 >= $thread_id) {
			throw new ApiException(
					"ApiException::showThread thread_id field should be positive integer");
		}

		$this->httClient->addGet(IAPI::URI_ME_THREAD_SHOW . $thread_id);

		return $this->httpClientSend();
	}

	//POST /api/me/threads/{id}
	/**
	 * Replies a message to a given thread
	 *
	 * @param number $thread_id
	 * @param string $body
	 */
	public function addThreadMessage($thread_id, $body) 
	{
		if (!is_numeric($thread_id) || 0 >= $thread_id) {
			throw new ApiException(
					"ApiException::addThreadMessage thread_id field should be positive integer");
		}
		if (!is_string($body) || 0 >= strlen($body)) {
			throw new ApiException(
					"ApiException::addThreadMessage body field needs to be a non-empty string");
		}

		$this->httClient
				->addPost(IAPI::URI_ME_THREAD_MESSAGE_ADD . $thread_id,
						array('message' => array('body' => $body)));
		return $this->httpClientSend();
	}
	//DELETE /api/me/threads/{id}
	/**
	 * Deletes a thread
	 *
	 * @param number $thread_id
	 */
	public function delThread($thread_id) 
	{
		if (!is_numeric($thread_id) || 0 >= $thread_id) {
			throw new ApiException(
					"ApiException::delThread thread_id field should be positive integer");
		}

		$this->httClient->addDelete(IAPI::URI_ME_THREAD_DEL . $thread_id);

		return $this->httpClientSend();
	}
	
/******************************************************************************/
/***********************     Votes METHODS  	  *****************************/
/******************************************************************************/
		
	//GET /api/me/vote
	/**
	 * show a vote of an user
	 */
	public function showVotes() 
	{
		$this->httClient->addGet(IAPI::URI_ME_VOTE_SHOW);
		return $this->httpClientSend();
	}
	//POST /api/me/vote create a vote
	/**
	 *
	 * @param number $photo_id
	 * @param float $score not nevative 1.5 vote; one vote between 1 to 10
	 */
	public function addVote($photo_id, $score = 1) 
	{
		if (!is_numeric($photo_id) || 0 >= $photo_id) {
			throw new ApiException(
					"ApiException::addVote photo_id field should be positive integer");
		}
		if (!is_numeric($score) || ($score < 1) || ($score > 10)) {
			throw new ApiException(
					"ApiException::addVote score field should be positive float, between 1 to 10");
		}

		$data = array('vote' => array('photo' => $photo_id, 'score' => $score));

		$this->httClient->addPost(IAPI::URI_ME_VOTE_ADD, $data);
		return $this->httpClientSend();
	}
	// DELETE /api/me/vote/{id}
	/**
	 * Delete a vote
	 *
	 * @param number $photo_id 
	 * 			The photo id what you remove vote.
	 */
	public function delVote($photo_id) 
	{
		if (!is_numeric($photo_id) || 0 >= $photo_id) {
			throw new ApiException(
					"ApiException::delVote photo_id field should be positive integer");
		}

		$this->httClient->addDelete(IApi::URI_ME_VOTE_DEL . $photo_id);

		return $this->httpClientSend();
	}
	/**
	 * show a vote of an user
	 */	
	public function showMeVotes() {
		throw \Exception("This method is not implement yet");
	
	}
		
/******************************************************************************/
/***********************     USERS METHODS  	  *****************************/
/******************************************************************************/
		


	// 	DELETE /api/user/
	/**
	 * Delete me user
	 */ 
	public function delMeUser() 
	{
		$this->httClient->addDelete(IApi::URI_ME_DEL);
		return $this->httpClientSend();

	}
	// 	GET /api/user/list
	/**
	 * Get all the users
	 */ 
	public function who() 
	{
		$this->httClient->addGet(IApi::URI_USERS_SHOW);
		return $this->httpClientSend();
	}
	/**
	 * Get am I
	 */
	public function whoami() 
	{
		$this->httClient->addGet(IApi::URI_ME_SHOW);
		return $this->httpClientSend();

	}
	/**
	 * Disable an user by id
	 *
	 * @param number $id
	 * 		The id of the user to be disable
	 * @throws ApiException
	 * 		The exception that is thrown when $user_id is not namber or it is negative number
	 */ 
	public function disableUser($user_id) 
	{
		if (!is_numeric($user_id) || 0 >= $user_id) {
			throw new ApiException(
					"ApiException::disableUser photo_id field should be positive integer");
		}

		ld($this->httClient->getUrl());
		$this->httClient->addPatch(sprintf(IApi::URI_USER_DISABLE, $user_id));
		return $this->httpClientSend();

	}
	//DELETE /api/me/
	/**
	 * Delete my user
	 */	
	public function delMe() 
	{
		$this->httClient->addDelete(IApi::URI_ME_DEL);
		return $this->httpClientSend();
	
	}	


}
